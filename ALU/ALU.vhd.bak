library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ALU is
	port	(clock   : in std_logic;
			 address : in std_logic_vector(7 downto 0);
			 data_in : in std_logic_vector(7 downto 0);
			 writen      : in std_logic;
			 reset   : in std_logic;
			 port_in_00: in std_logic_vector(7 downto 0);
			 port_in_01: in std_logic_vector(7 downto 0);
			 data_out : out std_logic_vector(7 downto 0);
			 port_out_00: out std_logic_vector(7 downto 0);
			 port_out_01: out std_logic_vector(7 downto 0));
end memory;

architecture ALU_arch of ALU is


begin

	ALU_PROCESS : process (A, B, ALU_Sel)
		variable Sum_uns : unsigned(8 downto 0);
		
		begin
			if (ALU_Sel = "000") then – ADDITION
			
--- Sum Calculation ---------------------------------–
				Sum_uns := unsigned('0' & A) + unsigned('0' & B);
				Result <= std_logic_vector(Sum_uns(7 downto 0));
				
--- Negative Flag (N) -------------------------------
				NZVC(3) <= Sum_uns(7);
				
--- Zero Flag (Z) ---------------------------------–
				if (Sum_uns(7 downto 0) = x"00") then
					NZVC(2) <= '1';
				else
					NZVC(2) <= '0';
				end if;
				
--- Overflow Flag (V) -------------------------------
				if ((A(7)='0' and B(7)='0' and Sum_uns(7)='1') or
               (A(7)='1' and B(7)='1' and Sum_uns(7)='0')) then
              NZVC(1) <= '1';
            else
              NZVC(1) <= '0';
            end if;
				
--- Carry Flag (C) ------------------------------------
				NZVC(0) <= Sum_uns(8);
			elsif (ALU_Sel = ...
                : “other ALU functionality goes here”
			end if;
	end process;
	

		
end ALU_arch;