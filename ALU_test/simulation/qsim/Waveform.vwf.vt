// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2024 14:48:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_test_vlg_sample_tst(
	A,
	ALU_Sel,
	B,
	sampler_tx
);
input [7:0] A;
input [2:0] ALU_Sel;
input [7:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or ALU_Sel or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_test_vlg_check_tst (
	display_b1,
	display_b2,
	display_result1,
	display_result2,
	NZVC,
	sampler_rx
);
input [6:0] display_b1;
input [6:0] display_b2;
input [6:0] display_result1;
input [6:0] display_result2;
input [3:0] NZVC;
input sampler_rx;

reg [6:0] display_b1_expected;
reg [6:0] display_b2_expected;
reg [6:0] display_result1_expected;
reg [6:0] display_result2_expected;
reg [3:0] NZVC_expected;

reg [6:0] display_b1_prev;
reg [6:0] display_b2_prev;
reg [6:0] display_result1_prev;
reg [6:0] display_result2_prev;
reg [3:0] NZVC_prev;

reg [6:0] display_b1_expected_prev;
reg [6:0] display_b2_expected_prev;
reg [6:0] display_result1_expected_prev;
reg [6:0] display_result2_expected_prev;
reg [3:0] NZVC_expected_prev;

reg [6:0] last_display_b1_exp;
reg [6:0] last_display_b2_exp;
reg [6:0] last_display_result1_exp;
reg [6:0] last_display_result2_exp;
reg [3:0] last_NZVC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	display_b1_prev = display_b1;
	display_b2_prev = display_b2;
	display_result1_prev = display_result1;
	display_result2_prev = display_result2;
	NZVC_prev = NZVC;
end

// update expected /o prevs

always @(trigger)
begin
	display_b1_expected_prev = display_b1_expected;
	display_b2_expected_prev = display_b2_expected;
	display_result1_expected_prev = display_result1_expected;
	display_result2_expected_prev = display_result2_expected;
	NZVC_expected_prev = NZVC_expected;
end


// expected display_b1[ 6 ]
initial
begin
	display_b1_expected[6] = 1'bX;
end 
// expected display_b1[ 5 ]
initial
begin
	display_b1_expected[5] = 1'bX;
end 
// expected display_b1[ 4 ]
initial
begin
	display_b1_expected[4] = 1'bX;
end 
// expected display_b1[ 3 ]
initial
begin
	display_b1_expected[3] = 1'bX;
end 
// expected display_b1[ 2 ]
initial
begin
	display_b1_expected[2] = 1'bX;
end 
// expected display_b1[ 1 ]
initial
begin
	display_b1_expected[1] = 1'bX;
end 
// expected display_b1[ 0 ]
initial
begin
	display_b1_expected[0] = 1'bX;
end 
// expected display_b2[ 6 ]
initial
begin
	display_b2_expected[6] = 1'bX;
end 
// expected display_b2[ 5 ]
initial
begin
	display_b2_expected[5] = 1'bX;
end 
// expected display_b2[ 4 ]
initial
begin
	display_b2_expected[4] = 1'bX;
end 
// expected display_b2[ 3 ]
initial
begin
	display_b2_expected[3] = 1'bX;
end 
// expected display_b2[ 2 ]
initial
begin
	display_b2_expected[2] = 1'bX;
end 
// expected display_b2[ 1 ]
initial
begin
	display_b2_expected[1] = 1'bX;
end 
// expected display_b2[ 0 ]
initial
begin
	display_b2_expected[0] = 1'bX;
end 
// expected display_result1[ 6 ]
initial
begin
	display_result1_expected[6] = 1'bX;
end 
// expected display_result1[ 5 ]
initial
begin
	display_result1_expected[5] = 1'bX;
end 
// expected display_result1[ 4 ]
initial
begin
	display_result1_expected[4] = 1'bX;
end 
// expected display_result1[ 3 ]
initial
begin
	display_result1_expected[3] = 1'bX;
end 
// expected display_result1[ 2 ]
initial
begin
	display_result1_expected[2] = 1'bX;
end 
// expected display_result1[ 1 ]
initial
begin
	display_result1_expected[1] = 1'bX;
end 
// expected display_result1[ 0 ]
initial
begin
	display_result1_expected[0] = 1'bX;
end 
// expected display_result2[ 6 ]
initial
begin
	display_result2_expected[6] = 1'bX;
end 
// expected display_result2[ 5 ]
initial
begin
	display_result2_expected[5] = 1'bX;
end 
// expected display_result2[ 4 ]
initial
begin
	display_result2_expected[4] = 1'bX;
end 
// expected display_result2[ 3 ]
initial
begin
	display_result2_expected[3] = 1'bX;
end 
// expected display_result2[ 2 ]
initial
begin
	display_result2_expected[2] = 1'bX;
end 
// expected display_result2[ 1 ]
initial
begin
	display_result2_expected[1] = 1'bX;
end 
// expected display_result2[ 0 ]
initial
begin
	display_result2_expected[0] = 1'bX;
end 
// expected NZVC[ 3 ]
initial
begin
	NZVC_expected[3] = 1'bX;
end 
// expected NZVC[ 2 ]
initial
begin
	NZVC_expected[2] = 1'bX;
end 
// expected NZVC[ 1 ]
initial
begin
	NZVC_expected[1] = 1'bX;
end 
// expected NZVC[ 0 ]
initial
begin
	NZVC_expected[0] = 1'bX;
end 
// generate trigger
always @(display_b1_expected or display_b1 or display_b2_expected or display_b2 or display_result1_expected or display_result1 or display_result2_expected or display_result2 or NZVC_expected or NZVC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display_b1 = %b | expected display_b2 = %b | expected display_result1 = %b | expected display_result2 = %b | expected NZVC = %b | ",display_b1_expected_prev,display_b2_expected_prev,display_result1_expected_prev,display_result2_expected_prev,NZVC_expected_prev);
	$display("| real display_b1 = %b | real display_b2 = %b | real display_result1 = %b | real display_result2 = %b | real NZVC = %b | ",display_b1_prev,display_b2_prev,display_result1_prev,display_result2_prev,NZVC_prev);
`endif
	if (
		( display_b1_expected_prev[0] !== 1'bx ) && ( display_b1_prev[0] !== display_b1_expected_prev[0] )
		&& ((display_b1_expected_prev[0] !== last_display_b1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b1_expected_prev);
		$display ("     Real value = %b", display_b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_b1_exp[0] = display_b1_expected_prev[0];
	end
	if (
		( display_b1_expected_prev[1] !== 1'bx ) && ( display_b1_prev[1] !== display_b1_expected_prev[1] )
		&& ((display_b1_expected_prev[1] !== last_display_b1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b1_expected_prev);
		$display ("     Real value = %b", display_b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_b1_exp[1] = display_b1_expected_prev[1];
	end
	if (
		( display_b1_expected_prev[2] !== 1'bx ) && ( display_b1_prev[2] !== display_b1_expected_prev[2] )
		&& ((display_b1_expected_prev[2] !== last_display_b1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b1_expected_prev);
		$display ("     Real value = %b", display_b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_b1_exp[2] = display_b1_expected_prev[2];
	end
	if (
		( display_b1_expected_prev[3] !== 1'bx ) && ( display_b1_prev[3] !== display_b1_expected_prev[3] )
		&& ((display_b1_expected_prev[3] !== last_display_b1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b1_expected_prev);
		$display ("     Real value = %b", display_b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_b1_exp[3] = display_b1_expected_prev[3];
	end
	if (
		( display_b1_expected_prev[4] !== 1'bx ) && ( display_b1_prev[4] !== display_b1_expected_prev[4] )
		&& ((display_b1_expected_prev[4] !== last_display_b1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b1_expected_prev);
		$display ("     Real value = %b", display_b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_b1_exp[4] = display_b1_expected_prev[4];
	end
	if (
		( display_b1_expected_prev[5] !== 1'bx ) && ( display_b1_prev[5] !== display_b1_expected_prev[5] )
		&& ((display_b1_expected_prev[5] !== last_display_b1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b1_expected_prev);
		$display ("     Real value = %b", display_b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_b1_exp[5] = display_b1_expected_prev[5];
	end
	if (
		( display_b1_expected_prev[6] !== 1'bx ) && ( display_b1_prev[6] !== display_b1_expected_prev[6] )
		&& ((display_b1_expected_prev[6] !== last_display_b1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b1_expected_prev);
		$display ("     Real value = %b", display_b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display_b1_exp[6] = display_b1_expected_prev[6];
	end
	if (
		( display_b2_expected_prev[0] !== 1'bx ) && ( display_b2_prev[0] !== display_b2_expected_prev[0] )
		&& ((display_b2_expected_prev[0] !== last_display_b2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b2_expected_prev);
		$display ("     Real value = %b", display_b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_b2_exp[0] = display_b2_expected_prev[0];
	end
	if (
		( display_b2_expected_prev[1] !== 1'bx ) && ( display_b2_prev[1] !== display_b2_expected_prev[1] )
		&& ((display_b2_expected_prev[1] !== last_display_b2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b2_expected_prev);
		$display ("     Real value = %b", display_b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_b2_exp[1] = display_b2_expected_prev[1];
	end
	if (
		( display_b2_expected_prev[2] !== 1'bx ) && ( display_b2_prev[2] !== display_b2_expected_prev[2] )
		&& ((display_b2_expected_prev[2] !== last_display_b2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b2_expected_prev);
		$display ("     Real value = %b", display_b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_b2_exp[2] = display_b2_expected_prev[2];
	end
	if (
		( display_b2_expected_prev[3] !== 1'bx ) && ( display_b2_prev[3] !== display_b2_expected_prev[3] )
		&& ((display_b2_expected_prev[3] !== last_display_b2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b2_expected_prev);
		$display ("     Real value = %b", display_b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_b2_exp[3] = display_b2_expected_prev[3];
	end
	if (
		( display_b2_expected_prev[4] !== 1'bx ) && ( display_b2_prev[4] !== display_b2_expected_prev[4] )
		&& ((display_b2_expected_prev[4] !== last_display_b2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b2_expected_prev);
		$display ("     Real value = %b", display_b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_b2_exp[4] = display_b2_expected_prev[4];
	end
	if (
		( display_b2_expected_prev[5] !== 1'bx ) && ( display_b2_prev[5] !== display_b2_expected_prev[5] )
		&& ((display_b2_expected_prev[5] !== last_display_b2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b2_expected_prev);
		$display ("     Real value = %b", display_b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_b2_exp[5] = display_b2_expected_prev[5];
	end
	if (
		( display_b2_expected_prev[6] !== 1'bx ) && ( display_b2_prev[6] !== display_b2_expected_prev[6] )
		&& ((display_b2_expected_prev[6] !== last_display_b2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_b2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_b2_expected_prev);
		$display ("     Real value = %b", display_b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_b2_exp[6] = display_b2_expected_prev[6];
	end
	if (
		( display_result1_expected_prev[0] !== 1'bx ) && ( display_result1_prev[0] !== display_result1_expected_prev[0] )
		&& ((display_result1_expected_prev[0] !== last_display_result1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result1_expected_prev);
		$display ("     Real value = %b", display_result1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_result1_exp[0] = display_result1_expected_prev[0];
	end
	if (
		( display_result1_expected_prev[1] !== 1'bx ) && ( display_result1_prev[1] !== display_result1_expected_prev[1] )
		&& ((display_result1_expected_prev[1] !== last_display_result1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result1_expected_prev);
		$display ("     Real value = %b", display_result1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_result1_exp[1] = display_result1_expected_prev[1];
	end
	if (
		( display_result1_expected_prev[2] !== 1'bx ) && ( display_result1_prev[2] !== display_result1_expected_prev[2] )
		&& ((display_result1_expected_prev[2] !== last_display_result1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result1_expected_prev);
		$display ("     Real value = %b", display_result1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_result1_exp[2] = display_result1_expected_prev[2];
	end
	if (
		( display_result1_expected_prev[3] !== 1'bx ) && ( display_result1_prev[3] !== display_result1_expected_prev[3] )
		&& ((display_result1_expected_prev[3] !== last_display_result1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result1_expected_prev);
		$display ("     Real value = %b", display_result1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_result1_exp[3] = display_result1_expected_prev[3];
	end
	if (
		( display_result1_expected_prev[4] !== 1'bx ) && ( display_result1_prev[4] !== display_result1_expected_prev[4] )
		&& ((display_result1_expected_prev[4] !== last_display_result1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result1_expected_prev);
		$display ("     Real value = %b", display_result1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_result1_exp[4] = display_result1_expected_prev[4];
	end
	if (
		( display_result1_expected_prev[5] !== 1'bx ) && ( display_result1_prev[5] !== display_result1_expected_prev[5] )
		&& ((display_result1_expected_prev[5] !== last_display_result1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result1_expected_prev);
		$display ("     Real value = %b", display_result1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_result1_exp[5] = display_result1_expected_prev[5];
	end
	if (
		( display_result1_expected_prev[6] !== 1'bx ) && ( display_result1_prev[6] !== display_result1_expected_prev[6] )
		&& ((display_result1_expected_prev[6] !== last_display_result1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result1_expected_prev);
		$display ("     Real value = %b", display_result1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display_result1_exp[6] = display_result1_expected_prev[6];
	end
	if (
		( display_result2_expected_prev[0] !== 1'bx ) && ( display_result2_prev[0] !== display_result2_expected_prev[0] )
		&& ((display_result2_expected_prev[0] !== last_display_result2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result2_expected_prev);
		$display ("     Real value = %b", display_result2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_result2_exp[0] = display_result2_expected_prev[0];
	end
	if (
		( display_result2_expected_prev[1] !== 1'bx ) && ( display_result2_prev[1] !== display_result2_expected_prev[1] )
		&& ((display_result2_expected_prev[1] !== last_display_result2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result2_expected_prev);
		$display ("     Real value = %b", display_result2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_result2_exp[1] = display_result2_expected_prev[1];
	end
	if (
		( display_result2_expected_prev[2] !== 1'bx ) && ( display_result2_prev[2] !== display_result2_expected_prev[2] )
		&& ((display_result2_expected_prev[2] !== last_display_result2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result2_expected_prev);
		$display ("     Real value = %b", display_result2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_result2_exp[2] = display_result2_expected_prev[2];
	end
	if (
		( display_result2_expected_prev[3] !== 1'bx ) && ( display_result2_prev[3] !== display_result2_expected_prev[3] )
		&& ((display_result2_expected_prev[3] !== last_display_result2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result2_expected_prev);
		$display ("     Real value = %b", display_result2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_result2_exp[3] = display_result2_expected_prev[3];
	end
	if (
		( display_result2_expected_prev[4] !== 1'bx ) && ( display_result2_prev[4] !== display_result2_expected_prev[4] )
		&& ((display_result2_expected_prev[4] !== last_display_result2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result2_expected_prev);
		$display ("     Real value = %b", display_result2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_result2_exp[4] = display_result2_expected_prev[4];
	end
	if (
		( display_result2_expected_prev[5] !== 1'bx ) && ( display_result2_prev[5] !== display_result2_expected_prev[5] )
		&& ((display_result2_expected_prev[5] !== last_display_result2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result2_expected_prev);
		$display ("     Real value = %b", display_result2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_result2_exp[5] = display_result2_expected_prev[5];
	end
	if (
		( display_result2_expected_prev[6] !== 1'bx ) && ( display_result2_prev[6] !== display_result2_expected_prev[6] )
		&& ((display_result2_expected_prev[6] !== last_display_result2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_result2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_result2_expected_prev);
		$display ("     Real value = %b", display_result2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display_result2_exp[6] = display_result2_expected_prev[6];
	end
	if (
		( NZVC_expected_prev[0] !== 1'bx ) && ( NZVC_prev[0] !== NZVC_expected_prev[0] )
		&& ((NZVC_expected_prev[0] !== last_NZVC_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[0] = NZVC_expected_prev[0];
	end
	if (
		( NZVC_expected_prev[1] !== 1'bx ) && ( NZVC_prev[1] !== NZVC_expected_prev[1] )
		&& ((NZVC_expected_prev[1] !== last_NZVC_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[1] = NZVC_expected_prev[1];
	end
	if (
		( NZVC_expected_prev[2] !== 1'bx ) && ( NZVC_prev[2] !== NZVC_expected_prev[2] )
		&& ((NZVC_expected_prev[2] !== last_NZVC_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[2] = NZVC_expected_prev[2];
	end
	if (
		( NZVC_expected_prev[3] !== 1'bx ) && ( NZVC_prev[3] !== NZVC_expected_prev[3] )
		&& ((NZVC_expected_prev[3] !== last_NZVC_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NZVC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NZVC_expected_prev);
		$display ("     Real value = %b", NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_NZVC_exp[3] = NZVC_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [2:0] ALU_Sel;
reg [7:0] B;
// wires                                               
wire [6:0] display_b1;
wire [6:0] display_b2;
wire [6:0] display_result1;
wire [6:0] display_result2;
wire [3:0] NZVC;

wire sampler;                             

// assign statements (if any)                          
ALU_test i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ALU_Sel(ALU_Sel),
	.B(B),
	.display_b1(display_b1),
	.display_b2(display_b2),
	.display_result1(display_result1),
	.display_result2(display_result2),
	.NZVC(NZVC)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// ALU_Sel[ 2 ]
initial
begin
	ALU_Sel[2] = 1'b0;
end 
// ALU_Sel[ 1 ]
initial
begin
	ALU_Sel[1] = 1'b0;
end 
// ALU_Sel[ 0 ]
initial
begin
	ALU_Sel[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

ALU_test_vlg_sample_tst tb_sample (
	.A(A),
	.ALU_Sel(ALU_Sel),
	.B(B),
	.sampler_tx(sampler)
);

ALU_test_vlg_check_tst tb_out(
	.display_b1(display_b1),
	.display_b2(display_b2),
	.display_result1(display_result1),
	.display_result2(display_result2),
	.NZVC(NZVC),
	.sampler_rx(sampler)
);
endmodule

